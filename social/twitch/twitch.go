/*
twitch.go
Created at 19.06.22 by emrearmagan
Copyright Â© go-social. All rights reserved.
*/

package twitch

import (
	"github.com/emrearmagan/go-social/oauth/oauth2"
	"github.com/emrearmagan/go-social/social"
)

type Client struct {
	oauth2 *oauth2.OAuth2

	User       *UserService
	Subscriber *SubscriberService
	Follower   *FollowerService
}

const (
	Base = "https://api.twitch.tv/"

	AuthorizationPrefix = "Bearer " // trailing space is required
	ClientHeaderName    = "Client-Id"

	RefreshBase = "https://id.twitch.tv"
	RefreshPath = "/oauth2/token"
)

// NewClient returns a new Twitter Client.
func NewClient(oauth *oauth2.OAuth2) *Client {
	// Twitch requires the client id to be in the header. At least for the endpoints implemented here
	tclient := oauth.Client().Base(Base)
	tclient.Add(ClientHeaderName, oauth.Credentials().ConsumerKey)

	oauth = oauth.NewClient(tclient)
	oauth.AuthorizationPrefix = AuthorizationPrefix

	return &Client{
		oauth2:     oauth,
		User:       newUserService(oauth),
		Subscriber: newSubscriberService(oauth),
		Follower:   newFollowerService(oauth),
	}
}

// RefreshToken a new access token can be generated by supplying the refresh token originally obtained during
// authorization code exchange.
// https://dev.twitch.tv/docs/authentication/refresh-tokens
func (c *Client) RefreshToken() (*oauth2.OAuthRefreshResponse, error) {
	oauthResp := new(OAuth2Response)
	apiError := new(APIError)

	// Twitch requires the client id and secret to be in the body of the request.
	rclient := c.oauth2.Client()
	rclient.AddQuery(struct {
		ClientId     string `url:"client_id"`
		ClientSecret string `url:"client_secret"`
	}{
		ClientId:     c.oauth2.Credentials().ConsumerKey,
		ClientSecret: c.oauth2.Credentials().ConsumerSecret,
	})
	oauth := c.oauth2.NewClient(rclient)

	err := oauth.RefreshToken(RefreshBase, RefreshPath, oauthResp, apiError)
	c.oauth2.UpdateToken(oauth2.NewToken(oauthResp.AccessToken, oauthResp.RefreshToken))
	return &oauth2.OAuthRefreshResponse{
		Token: oauth2.Token{
			Token:        oauthResp.AccessToken,
			RefreshToken: oauthResp.RefreshToken,
		},
		TokenType: oauthResp.TokenType,
		ExpiresIn: oauthResp.ExpiresIn,
		Scope:     oauthResp.Scope,
	}, social.CheckError(err)
}

type OAuth2Response struct {
	AccessToken  string   `json:"access_token"`
	RefreshToken string   `json:"refresh_token"`
	ExpiresIn    int      `json:"expires_in"`
	Scope        []string `json:"scope"`
	TokenType    string   `json:"token_type"`
}
