/*
reddit.go
Created at 08.04.22 by emrearmagan
Copyright Â© go-social. All rights reserved.
*/

package reddit

import (
	"context"
	"github.com/emrearmagan/go-social/models"
	"github.com/emrearmagan/go-social/oauth"
	"github.com/emrearmagan/go-social/oauth/oauth2"
	"github.com/emrearmagan/go-social/social"
	"github.com/emrearmagan/go-social/social/client"
	"strings"
)

const (
	Base               = "https://oauth.reddit.com"
	UserAgentHeaderKey = "User-Agent"

	RefreshBase = "https://www.reddit.com"
	RefreshPath = "/api/v1/access_token"
)

type Client struct {
	oauth2 *oauth2.OAuth2

	User *UserService
}

// NewClient returns a new Reddit Client.
// Reddit API requires the UserAgent header for the authenticated application.
// It is usually in the form of: 'platform:name:1.0 (by /u/username)'. Platform would be for example ios for an registered ios application. 1.0 is the authentication version
func NewClient(ctx context.Context, c *oauth.Credentials, token *oauth2.Token, userAgent string) *Client {
	cl := client.NewHttpClient().Base(Base).Decoder(redditDecoder{})
	cl.Set(UserAgentHeaderKey, userAgent)
	auther := oauth2.NewOAuth(ctx, c, token, cl)

	return &Client{
		oauth2: auther,
		User:   newUserService(auther),
	}
}

// RefreshToken , a new access token can be generated by supplying the refresh token originally obtained during
// authorization code exchange.
// https://github.com/reddit-archive/reddit/wiki/OAuth2#refreshing-the-tok
func (c *Client) RefreshToken() (*oauth2.OAuthRefreshResponse, error) {
	oauthResp := new(OAuth2RefreshResponse)
	apiError := new(APIError)

	// Requires basic authentication for refreshing the token even tho the response is bearer....
	a := c.oauth2.Basic()
	err := a.RefreshToken(RefreshBase, RefreshPath, oauthResp, apiError)
	if err == nil {
		c.oauth2.UpdateToken(oauth2.NewToken(oauthResp.AccessToken, oauthResp.RefreshToken))
	}
	return &oauth2.OAuthRefreshResponse{
		Token: oauth2.Token{
			Token:        oauthResp.AccessToken,
			RefreshToken: oauthResp.RefreshToken,
		},
		TokenType: oauthResp.TokenType,
		ExpiresIn: oauthResp.ExpiresIn,
		Scope:     strings.Fields(oauthResp.Scope),
	}, social.CheckError(err)
}

type OAuth2RefreshResponse struct {
	AccessToken  string `json:"access_token"`
	TokenType    string `json:"token_type"`
	ExpiresIn    int    `json:"expires_in"`
	RefreshToken string `json:"refresh_token"`
	Scope        string `json:"scope"`
}

func (c *Client) GoSocialUser() (*models.SocialUser, error) {
	u, err := c.User.UserCredentials()
	if err != nil {
		return nil, err
	}

	goSocial := models.SocialUser{
		Username:     u.Name,
		Name:         u.Subreddit.DisplayName,
		UserId:       u.ID,
		Verified:     u.Verified,
		ContentCount: int64(u.TotalKarma),
		Following:    &u.NumFriends,
		AvatarUrl:    u.SnoovatarImg,
		Followers:    u.Subreddit.Subscribers,
		Url:          "https://www.reddit.com" + u.Subreddit.URL,
	}

	return &goSocial, nil
}
